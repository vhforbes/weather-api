{"version":3,"sources":["components/Weather.js","components/SearchBar.js","App.js","index.js"],"names":["Weather","props","APPID","city","useState","name","now","temperature","min","max","lon","lat","cityInfo","setCityInfo","forecast","setForecast","cityData","getCityData","a","axios","get","response","data","console","log","main","temp","weather","coord","getCityForecast","dataArray","daily","treatedData","map","item","day","dt","maxTemp","minTemp","useEffect","Container","Row","className","Col","style","textAlign","parseInt","fluid","Table","responsive","key","weekDay","getDay","fromUnixTime","SearchBar","input","setInput","changeCity","Navbar","expand","bg","color","margin","marginBottom","paddingBottom","Form","inline","FormControl","type","onChange","e","value","target","replace","handleChange","placeholder","Button","onClick","App","setCity","ReactDOM","render","StrictMode","rel","href","integrity","crossOrigin","document","getElementById"],"mappings":"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","file":"static/js/main.38179b43.chunk.js","sourcesContent":["// Imports\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport fromUnixTime from \"date-fns/fromUnixTime\";\nimport getDay from \"date-fns/getDay\";\n\n// Bootstrap Imports\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Table from \"react-bootstrap/Table\";\n\nconst Weather = (props) => {\n  const APPID = \"96f0fae4d16d8eaf08da72206f8a7458\";\n  const { city } = props;\n  const [cityInfo, setCityInfo] = useState({\n    name: null,\n    now: {\n      temperature: null,\n      min: null,\n      max: null,\n    },\n    lon: null,\n    lat: null,\n  });\n  const [forecast, setForecast] = useState([]);\n\n  let cityData = null;\n  let forecastData = null;\n\n  const getCityData = async () => {\n    try {\n      let response = await axios.get(\n        `http://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&APPID=${APPID}`\n      );\n\n      cityData = response.data;\n\n      console.log(cityData);\n\n      setCityInfo({\n        name: cityData.name,\n        now: {\n          temperature: cityData.main.temp,\n          weather: cityData.weather[0].main,\n        },\n        lon: cityData.coord.lon,\n        lat: cityData.coord.lat,\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const getCityForecast = async () => {\n    try {\n      let response = await axios.get(\n        `https://api.openweathermap.org/data/2.5/onecall?lat=${cityInfo.lat}&lon=${cityInfo.lon}&exclude=current,minutely,hourly&units=metric&appid=${APPID}`\n      );\n\n      // console.log(response.data.daily);\n      let dataArray = response.data.daily;\n      let treatedData = dataArray.map((item) => {\n        let object = {\n          day: item.dt,\n          maxTemp: item.temp.max,\n          minTemp: item.temp.min,\n          weather: item.weather[0].main,\n        };\n        return object;\n      });\n\n      setForecast([...treatedData]);\n\n      console.log(\"forecast updated\");\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const weekDay = (day) => {\n    switch (day) {\n      case 0:\n        return \"Sunday\";\n      case 1:\n        return \"Monday\";\n      case 2:\n        return \"Tuesday\";\n      case 3:\n        return \"Wednesday\";\n      case 4:\n        return \"Thursday\";\n      case 5:\n        return \"Friday\";\n      case 6:\n        return \"Saturday\";\n      default:\n        break;\n    }\n  };\n\n  // Update city data when city changes\n  useEffect(() => {\n    getCityData();\n  }, [city]);\n\n  // Update forecast when Lat and Lon are updated in the object\n  useEffect(() => {\n    getCityForecast();\n  }, [cityInfo]);\n\n  return (\n    <div>\n      <Container>\n        <Row className=\"justify-content-sm-center\">\n          <Col>\n            <div\n              style={{\n                textAlign: \"center\",\n              }}\n            >\n              <h3>{cityInfo.name}</h3>\n              <h4>{parseInt(cityInfo.now.temperature)}ºC</h4>\n              <h4>{cityInfo.now.weather}</h4>\n\n              <p></p>\n            </div>\n          </Col>\n        </Row>\n      </Container>\n\n      <Container fluid=\"md\">\n        <Row className=\"justify-content-sm-center\">\n          <Col>\n            <h4>Forecast</h4>\n          </Col>\n        </Row>\n        <Row className=\"justify-content-sm-center\">\n          <Col>\n            <Table responsive>\n              <tbody>\n                <tr>\n                  <th>Day:</th>\n                  {forecast.map((item, key) => {\n                    let day = weekDay(getDay(fromUnixTime(item.day)));\n                    return <th key={key}>{day}</th>;\n                  })}\n                </tr>\n                <tr>\n                  <th>Max:</th>\n                  {forecast.map((item, key) => {\n                    let day = parseInt(item.maxTemp);\n                    return <th key={key}>{day}ºC</th>;\n                  })}\n                </tr>\n                <tr>\n                  <th>Min:</th>\n                  {forecast.map((item, key) => {\n                    let day = parseInt(item.minTemp);\n                    return <th key={key}>{day}ºC</th>;\n                  })}\n                </tr>\n                <tr>\n                  <th>Weather:</th>\n                  {forecast.map((item, key) => {\n                    let day = item.weather;\n                    return <th key={key}>{day}</th>;\n                  })}\n                </tr>\n              </tbody>\n            </Table>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n};\n\nexport default Weather;\n","import React, { useEffect, useState } from \"react\";\n\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Form from \"react-bootstrap/Form\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport Button from \"react-bootstrap/Button\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\n\nconst SearchBar = (props) => {\n  const [input, setInput] = useState();\n\n  let { city, changeCity } = props;\n\n  const handleChange = (e) => {\n    let value = e.target.value;\n    value.replace(/\\s/g, \"+\");\n    setInput(value);\n  };\n\n  const handleClick = () => {\n    changeCity(input);\n  };\n\n  return (\n    <div>\n      <Navbar expand=\"lg\" bg=\"dark\">\n        <h3\n          className=\"mx-auto\"\n          style={{ color: \"white\", margin: \"0px 0px 5px 5px\" }}\n        >\n          Victor's Weather App\n        </h3>\n      </Navbar>\n\n      <Navbar\n        style={{ marginBottom: \"15px\", paddingBottom: \"10px\" }}\n        expand=\"lg\"\n        bg=\"dark\"\n      >\n        <Form\n          inline\n          className=\"mx-auto\"\n          style={{\n            margin: \"10px\",\n          }}\n        >\n          <FormControl\n            type=\"text\"\n            onChange={(e) => handleChange(e)}\n            placeholder=\"Search\"\n            className=\"mr-sm-2\"\n          />\n          <Button className=\"mx-auto\" onClick={() => handleClick()} style={{}}>\n            Search\n          </Button>\n        </Form>\n      </Navbar>\n    </div>\n  );\n};\n\nexport default SearchBar;\n","import React, { useState } from \"react\";\nimport Weather from \"./components/Weather\";\nimport SearchBar from \"./components/SearchBar\";\n\nfunction App() {\n  const [city, setCity] = useState(\"London\");\n\n  const changeCity = (city) => {\n    setCity(city);\n  };\n\n  return (\n    <div className=\"App\">\n      <SearchBar city={city} changeCity={changeCity} />\n      <Weather city={city} changeCity={changeCity} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <link\n      rel=\"stylesheet\"\n      href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css\"\n      integrity=\"sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk\"\n      crossOrigin=\"anonymous\"\n    />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}